#+begin_src latex
  \section{Introduction}
  !The \texttt{clio} package implements functions to automate routine
  !input and output operations in command-line programs.
  Examples include
  iterating over input files, and printing author and program
  information. These operations are not complicated, and we could
  re-write them whenever needed. But to achieve the level of uniformity
  that makes a tool inconspicuous enough to stand a chance of being
  useful, we delegate them to a package.

  \section{Implementation}
  The package contains hooks for imports, type declarations, 
  and functions.
#+end_src
#+begin_src go <<clio.go>>=
  package clio

  import (
	  //<<Imports>>
  )

  //<<Type declarations>>
  //<<Functions>>
#+end_src
#+begin_src latex
  \subsection{Function \texttt{ParseFiles}}
  !\texttt{ParseFiles} iterates over a set of files and applies the same
  !function to each one. The arguments of that function are variadic and
  !have the empty interface type.
#+end_src
#+begin_src go <<Functions>>=
  func ParseFiles(files []string, fn FileAction, args ...interface{}) {
	  r := os.Stdin
	  if len(files) == 0 {
		  fn(r, args...)
	  } else {
		  //<<Iterate over files>>
	  }
  }
#+end_src
#+begin_src latex
  !\texttt{FileAction} takes as first, and possibly only, argument an
  !\texttt{io.Reader}. In addition, it can take variadic
  !arguments of type empty interface.
#+end_src
#+begin_src go <<Type declarations>>=
  type FileAction func(io.Reader, ...interface{})
#+end_src
#+begin_src latex
  We have used functions from the packages \texttt{io} and \texttt{os}.
#+end_src
#+begin_src go <<Imports>>=
  "io"
  "os"
#+end_src
#+begin_src latex
  The function is applied to each file in turn. 
#+end_src
#+begin_src go <<Iterate over files>>=
  for _, f := range files {
	  r, err := os.Open(f)
	  if err != nil {
		  log.Fatalf("couldn't open %q\n", f)
	  }
	  fn(r, args...)
	  r.Close()
  }
#+end_src
#+begin_src latex
  We close the implementation of \texttt{ParseFiles} by importing the
  \texttt{log} package.
#+end_src
#+begin_src go <<Imports>>=
  "log"
#+end_src
#+begin_src latex
  \subsection{Function \texttt{PrintInfo}}
  !\texttt{PrintInfo} prints the name of a program, its version, date of
  !compilation, author, her/his email address, and the program's
  !license.
#+end_src
#+begin_src go <<Functions>>=
  func PrintInfo(name, version, date, author, email, license string) {
	  fmt.Printf("%s %s, %s\n", name, version, date)
	  fmt.Printf("Author: %s, %s\n", author, email)
	  fmt.Printf("License: %s\n", license)
  }
#+end_src
#+begin_src latex
  \subsection{Function \texttt{Usage}}
  !\texttt{Usage} sets the response to a request for
  !help.
  This is achieved by setting the \texttt{flag.Usage} function.
#+end_src
#+begin_src go <<Functions>>=
  func Usage(usage, purpose, example string) {
	  flag.Usage = func() {
		  o := flag.CommandLine.Output()
		  fmt.Fprintf(o, "Usage: %s\n%s\nExample: %s\n",
			  usage, purpose, example)
		  fmt.Fprintf(o, "Options:\n")
		  flag.PrintDefaults()
	  }
  }
#+end_src
#+begin_src latex
  We import the \texttt{flag} and \texttt{fmt} packages.
#+end_src
#+begin_src go <<Imports>>=
  "flag"
  "fmt"
#+end_src
#+begin_src latex
  \subsection{Function \texttt{PrepLog}}
  In \texttt{util} and elsewhere, we handle errors via the \texttt{log}
  package. By default, this prefixes the error message with time and
  date. For command line programs, we'd like error messages prefixed
  with the name of the program and with date and time suppressed.

  !\texttt{PrepLog} takes as argument the program name and sets
  !this as the prefix for error messages from the \texttt{log} package.
#+end_src
#+begin_src go <<Functions>>=
  func PrepLog(name string) {
	  m := fmt.Sprintf("%s: ", name)
	  log.SetPrefix(m)
	  log.SetFlags(0)
  }
#+end_src
