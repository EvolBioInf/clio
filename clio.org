#+begin_src latex
  \section{Introduction}
  !The \texttt{clio} package implements functions to automate routine
  !input and output operations in command-line programs.
  Examples include
  iterating over input files, and printing author and program
  information. These operations are not complicated, and we could
  re-write them whenever needed. But to achieve the level of uniformity
  that makes a tool inconspicuous enough to stand a chance of being
  useful, we delegate them to a package.

  \section{Implementation}
  The package contains hooks for imports, type declarations, 
  and functions.
#+end_src
#+begin_src go <<clio.go>>=
  package clio

  import (
	  //<<Imports>>
  )

  //<<Type declarations>>
  //<<Functions>>
#+end_src
#+begin_src latex
  \subsection{Function \texttt{ParseFiles}}
  !\texttt{ParseFiles} iterates over a set of files and applies the same
  !function to each one.
#+end_src
#+begin_src go <<Functions>>=
  func ParseFiles(files []string, fn FileAction) {
	  r := os.Stdin
	  if len(files) == 0 {
		  fn(r)
	  } else {
		  //<<Iterate over files>>
	  }
  }
#+end_src
#+begin_src latex
  !\texttt{FileAction} takes as first, and possibly only, argument an
  !\texttt{io.Reader}. In addition, it can take an arbitrary number of
  !arguments of any type to pass further information.
#+end_src
#+begin_src go <<Type declarations>>=
  type FileAction func(io.Reader, ...interface{})
#+end_src
#+begin_src latex
  We have used functions from the packages \texttt{io} and \texttt{os}.
#+end_src
#+begin_src go <<Imports>>=
  "io"
  "os"
#+end_src
#+begin_src latex
  The function is applied to each file in turn. 
#+end_src
#+begin_src go <<Iterate over files>>=
  for _, f := range files {
	  r, err := os.Open(f)
	  if err != nil {
		  log.Fatalf("couldn't open %q\n", f)
	  }
	  fn(r)
	  r.Close()
  }
#+end_src
#+begin_src latex
  We close the implementation of \texttt{ParseFiles} by importing the
  \texttt{log} package.
#+end_src
#+begin_src go <<Imports>>=
  "log"
#+end_src
#+begin_src latex
  \subsection{Function \texttt{PrintInfo}}
  !\texttt{PrintInfo} prints the name, version, date, and license of a
  !program. 
#+end_src
#+begin_src go <<Functions>>=
  func PrintInfo(name, version, date string) {
	  fmt.Printf("%s %s, %s\n", name, version, date)
	  a := "Bernhard Haubold, haubold@evolbio.mpg.de"
	  fmt.Printf("Author: %s\n", a)
	  l := "Gnu General Public License, " +
		  "https://www.gnu.org/licenses/gpl.html"
	  fmt.Printf("License: %s\n", l)
  }
#+end_src
#+begin_src latex
  To complete \texttt{PrintInfo}, we import the package \texttt{fmt}.
#+end_src
#+begin_src go <<Imports>>=
  "fmt"
#+end_src
#+begin_src latex
  \subsection{Function \texttt{Usage}}
  !\texttt{Usage} is the response to a request for
  !help.
#+end_src
#+begin_src go <<Functions>>=
  func Usage(usage, purpose, example string) {
	  flag.Usage = func() {
		  o := flag.CommandLine.Output()
		  fmt.Fprintf(o, "Usage: %s\n%s\nExample: %s\n",
			  usage, purpose, example)
		  fmt.Fprintf(o, "Options:\n")
		  flag.PrintDefaults()
	  }
  }
#+end_src
#+begin_src latex
  We import the \texttt{flag} package.
#+end_src
#+begin_src go <<Imports>>=
  "flag"
#+end_src
